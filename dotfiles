#!/usr/bin/env bash
# This script was generated by bashly 1.2.6 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
dotfiles_usage() {
  printf "dotfiles - dotfile manager created by Michael Callahan\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfiles COMMAND\n"
  printf "  dotfiles [COMMAND] --help | -h\n"
  printf "  dotfiles --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Install dotfiles\n" "install  "
  printf "  %s   backup any existing dotfiles to a tar.gz\n" "backup   "
  printf "  %s   uninstall a dotfiles-managed installation\n" "uninstall"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "API_KEY"
    printf "    Set your API key\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cli download example.com\n"
    printf "  cli download example.com ./output -f\n"
    echo

  fi
}

# :command.usage
dotfiles_install_usage() {
  printf "dotfiles install - Install dotfiles\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfiles install [OPTIONS]\n"
  printf "  dotfiles install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--platform PLATFORM (required)"
    printf "    One of linux or macos.\n"
    printf "    %s\n" "Allowed: linux, macos"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfiles_backup_usage() {
  printf "dotfiles backup - backup any existing dotfiles to a tar.gz\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfiles backup\n"
  printf "  dotfiles backup --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfiles_uninstall_usage() {
  printf "dotfiles uninstall - uninstall a dotfiles-managed installation\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfiles uninstall\n"
  printf "  dotfiles uninstall --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions
# :command.function
dotfiles_install_command() {

  # src/install_command.sh
  #echo "# this file is located in 'src/install_command.sh'"
  #echo "# code for 'dotfiles install' goes here"
  #echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

  platform=${args[--platform]}
  # init a new installation, backing up any current dotfiles
  if ! test -f ~/.dotfilelock; then

      echo Backing up existing dotfiles
      touch ~/.dotfilelock
      printf -v date '%(%Y-%m-%d_%H%M%S)T' -1
      find ~/. -maxdepth 3 -type f -name ".*" -print0 | tar -cvf "dotfiles.tar-$date" --null -T -

  fi

  # reload fonts
  # fc-cache -fv
  # starship preset nerd-font-symbols -o ~/.config/starship.toml

  myDotfilesFullPath=(~/.config/dotfiles/$platform/homedir/.*)
  myDotfilesShortPath=( "${myDotfilesFullPath[@]##*/}" )

  echo "${myDotfilesShortPath[@]}"

  if test -f ~/.dotfilelock; then

      # Install/reinstall dotfiles
      for file in "${myDotfilesShortPath[@]}"; do
          if [ -L ~/$file ] ; then

              echo removing old symlink for "$file"
              rm ~/$file
          fi

          echo symlinking "$file"
          ln -s ~/.config/dotfiles/$platform/homedir/$file ~/$file

      done
      unset file
  fi

  echo done!
}

# :command.function
dotfiles_backup_command() {

  # src/backup_command.sh
  echo "# this file is located in 'src/backup_command.sh'"
  echo "# code for 'dotfiles backup' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

  platform=${args[--platform]}

  # Backup dotfiles

  echo Backing up dotfiles
  printf -v date '%(%Y-%m-%d_%H%M%S)T' -1
  find ~/. -maxdepth 3 -type f -name ".*" -print0 | tar -cvf "dotfiles.tar-$date" --null -T -
}

# :command.function
dotfiles_uninstall_command() {

  # src/uninstall_command.sh
  echo "# this file is located in 'src/uninstall_command.sh'"
  echo "# code for 'dotfiles uninstall' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        dotfiles_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  env_var_names+=("API_KEY")

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install)
      action="install"
      shift
      dotfiles_install_parse_requirements "$@"
      shift $#
      ;;

    backup)
      action="backup"
      shift
      dotfiles_backup_parse_requirements "$@"
      shift $#
      ;;

    uninstall)
      action="uninstall"
      shift
      dotfiles_uninstall_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dotfiles_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfiles_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --platform)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--platform']="$2"
          shift
          shift
        else
          printf "%s\n" "--platform requires an argument: --platform PLATFORM" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['--platform']+x} ]]; then
    printf "missing required flag: --platform PLATFORM\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ ${args['--platform']:-} ]] && [[ ! ${args['--platform']:-} =~ ^(linux|macos)$ ]]; then
    printf "%s\n" "--platform must be one of: linux, macos" >&2
    exit 1
  fi

}

# :command.parse_requirements
dotfiles_backup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_backup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfiles_uninstall_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        dotfiles_uninstall_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="uninstall"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a other_args=()
  declare -g -a env_var_names=()
  declare -g -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "install") dotfiles_install_command ;;
    "backup") dotfiles_backup_command ;;
    "uninstall") dotfiles_uninstall_command ;;
  esac
}

initialize
run "$@"
