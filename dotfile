#!/usr/bin/env bash
# This script was generated by bashly 1.2.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
dotfile_usage() {
  printf "dotfile - dotfile manager created by Michael Callahan\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfile COMMAND\n"
  printf "  dotfile [COMMAND] --help | -h\n"
  printf "  dotfile --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Download dot files and install them\n" "install  "
  printf "  %s   backup any existing dotfiles to a tar.gz\n" "backup   "
  printf "  %s   uninstall a dotfiles-managed installation\n" "uninstall"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "API_KEY"
    printf "    Set your API key\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  cli download example.com\n"
    printf "  cli download example.com ./output -f\n"
    echo

  fi
}

# :command.usage
dotfile_install_usage() {
  printf "dotfile install - Download dot files and install them\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfile install COMMAND\n"
  printf "  dotfile install [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   install dotfiles appropriate for ubuntu\n" "ubuntu"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfile_install_ubuntu_usage() {
  printf "dotfile install ubuntu - install dotfiles appropriate for ubuntu\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfile install ubuntu COMMAND\n"
  printf "  dotfile install ubuntu [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   install dotfiles appropriate for ubuntu\n" "base "
  printf "  %s   install additional binaries and configs\n" "extra"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfile_install_ubuntu_base_usage() {
  printf "dotfile install ubuntu base - install dotfiles appropriate for ubuntu\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfile install ubuntu base [OPTIONS]\n"
  printf "  dotfile install ubuntu base --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Overwrite any existing dotfiles\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfile_install_ubuntu_extra_usage() {
  printf "dotfile install ubuntu extra - install additional binaries and configs\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfile install ubuntu extra [OPTIONS]\n"
  printf "  dotfile install ubuntu extra --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Overwrite any existing binary installations\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfile_backup_usage() {
  printf "dotfile backup - backup any existing dotfiles to a tar.gz\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfile backup COMMAND\n"
  printf "  dotfile backup [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   backup dotfiles on an ubuntu machine\n" "ubuntu"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfile_backup_ubuntu_usage() {
  printf "dotfile backup ubuntu - backup dotfiles on an ubuntu machine\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfile backup ubuntu\n"
  printf "  dotfile backup ubuntu --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfile_uninstall_usage() {
  printf "dotfile uninstall - uninstall a dotfiles-managed installation\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfile uninstall COMMAND\n"
  printf "  dotfile uninstall [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   uninstall dotfiles on ubuntu\n" "ubuntu"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfile_uninstall_ubuntu_usage() {
  printf "dotfile uninstall ubuntu - uninstall dotfiles on ubuntu\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfile uninstall ubuntu COMMAND\n"
  printf "  dotfile uninstall ubuntu [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   install dotfiles appropriate for ubuntu\n" "base "
  printf "  %s   install additional binaries and configs\n" "extra"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfile_uninstall_ubuntu_base_usage() {
  printf "dotfile uninstall ubuntu base - install dotfiles appropriate for ubuntu\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfile uninstall ubuntu base\n"
  printf "  dotfile uninstall ubuntu base --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
dotfile_uninstall_ubuntu_extra_usage() {
  printf "dotfile uninstall ubuntu extra - install additional binaries and configs\n\n"

  printf "%s\n" "Usage:"
  printf "  dotfile uninstall ubuntu extra\n"
  printf "  dotfile uninstall ubuntu extra --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.function
dotfile_install_ubuntu_base_command() {
  # src/install_ubuntu_base_command.sh
  echo "# this file is located in 'src/install_ubuntu_base_command.sh'"
  echo "# code for 'dotfile install ubuntu base' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
dotfile_install_ubuntu_extra_command() {
  # src/install_ubuntu_extra_command.sh
  echo "# this file is located in 'src/install_ubuntu_extra_command.sh'"
  echo "# code for 'dotfile install ubuntu extra' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
dotfile_backup_ubuntu_command() {
  # src/backup_ubuntu_command.sh
  # this file is located in 'src/backup_ubuntu_command.sh'
  # code for 'dotfile backup ubuntu' goes here
  # you can edit it freely and regenerate (it will not be overwritten)
  inspect_args

}

# :command.function
dotfile_uninstall_ubuntu_base_command() {
  # src/uninstall_ubuntu_base_command.sh
  echo "# this file is located in 'src/uninstall_ubuntu_base_command.sh'"
  echo "# code for 'dotfile uninstall ubuntu base' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
dotfile_uninstall_ubuntu_extra_command() {
  # src/uninstall_ubuntu_extra_command.sh
  echo "# this file is located in 'src/uninstall_ubuntu_extra_command.sh'"
  echo "# code for 'dotfile uninstall ubuntu extra' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        dotfile_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  env_var_names+=("API_KEY")

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install)
      action="install"
      shift
      dotfile_install_parse_requirements "$@"
      shift $#
      ;;

    backup)
      action="backup"
      shift
      dotfile_backup_parse_requirements "$@"
      shift $#
      ;;

    uninstall)
      action="uninstall"
      shift
      dotfile_uninstall_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dotfile_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfile_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dotfile_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    ubuntu)
      action="ubuntu"
      shift
      dotfile_install_ubuntu_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dotfile_install_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfile_install_ubuntu_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dotfile_install_ubuntu_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    base)
      action="base"
      shift
      dotfile_install_ubuntu_base_parse_requirements "$@"
      shift $#
      ;;

    extra)
      action="extra"
      shift
      dotfile_install_ubuntu_extra_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dotfile_install_ubuntu_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfile_install_ubuntu_base_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dotfile_install_ubuntu_base_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install ubuntu base"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfile_install_ubuntu_extra_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dotfile_install_ubuntu_extra_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install ubuntu extra"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfile_backup_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dotfile_backup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    ubuntu)
      action="ubuntu"
      shift
      dotfile_backup_ubuntu_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dotfile_backup_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfile_backup_ubuntu_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dotfile_backup_ubuntu_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="backup ubuntu"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfile_uninstall_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dotfile_uninstall_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    ubuntu)
      action="ubuntu"
      shift
      dotfile_uninstall_ubuntu_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dotfile_uninstall_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfile_uninstall_ubuntu_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dotfile_uninstall_ubuntu_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    base)
      action="base"
      shift
      dotfile_uninstall_ubuntu_base_parse_requirements "$@"
      shift $#
      ;;

    extra)
      action="extra"
      shift
      dotfile_uninstall_ubuntu_extra_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dotfile_uninstall_ubuntu_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfile_uninstall_ubuntu_base_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dotfile_uninstall_ubuntu_base_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="uninstall ubuntu base"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dotfile_uninstall_ubuntu_extra_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dotfile_uninstall_ubuntu_extra_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="uninstall ubuntu extra"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "install") dotfile_install_command ;;
    "install ubuntu") dotfile_install_ubuntu_command ;;
    "install ubuntu base") dotfile_install_ubuntu_base_command ;;
    "install ubuntu extra") dotfile_install_ubuntu_extra_command ;;
    "backup") dotfile_backup_command ;;
    "backup ubuntu") dotfile_backup_ubuntu_command ;;
    "uninstall") dotfile_uninstall_command ;;
    "uninstall ubuntu") dotfile_uninstall_ubuntu_command ;;
    "uninstall ubuntu base") dotfile_uninstall_ubuntu_base_command ;;
    "uninstall ubuntu extra") dotfile_uninstall_ubuntu_extra_command ;;
  esac
}

initialize
run "$@"
